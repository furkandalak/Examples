using System;
using System.Threading;

public class BankAccount
{
    private decimal balance;
    private object balanceLock = new object();

    public BankAccount(decimal initialBalance)
    {
        this.balance = initialBalance;
    }

    public decimal GetBalance()
    {
        lock (balanceLock)
        {
            return balance;
        }
    }

    public void Deposit(decimal amount)
    {
        lock (balanceLock)
        {
            Console.WriteLine($"Depositing {amount} dollars...");
            balance += amount;
            Console.WriteLine($"New balance: {balance} dollars");
        }
    }

    public void Withdraw(decimal amount)
    {
        lock (balanceLock)
        {
            if (balance >= amount)
            {
                Console.WriteLine($"Withdrawing {amount} dollars...");
                balance -= amount;
                Console.WriteLine($"New balance: {balance} dollars");
            }
            else
            {
                Console.WriteLine("Insufficient funds!");
            }
        }
    }
}

class Program
{
    static void Main()
    {
        BankAccount account = new BankAccount(1000);

        Thread thread1 = new Thread(() =>
        {
            for (int i = 0; i < 5; i++)
            {
                account.Deposit(100);
                Thread.Sleep(200);
            }
        });

        Thread thread2 = new Thread(() =>
        {
            for (int i = 0; i < 5; i++)
            {
                account.Withdraw(50);
                Thread.Sleep(150);
            }
        });

        thread1.Start();
        thread2.Start();

        thread1.Join();
        thread2.Join();

        Console.WriteLine($"Final balance: {account.GetBalance()} dollars");
    }
}
